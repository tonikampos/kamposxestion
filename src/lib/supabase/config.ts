import { createClient } from '@supabase/supabase-js';

// Usamos valores vac√≠os durante el build para evitar cualquier problema con Netlify
// Las variables reales se cargar√°n solo en tiempo de ejecuci√≥n en el navegador
const HARDCODED_FALLBACKS = {
  NEXT_PUBLIC_SUPABASE_URL: '',
  NEXT_PUBLIC_SUPABASE_ANON_KEY: ''
};

// Funci√≥n para verificar si un valor de variable es v√°lido
const isValidValue = (value: string | null | undefined): boolean => {
  return Boolean(value && !value.includes('{{') && !value.includes('}}') && value !== 'placeholder-for-static-export');
};

// Funci√≥n para reiniciar el cliente de Supabase
export const reinitializeSupabaseClient = (): void => {
  if (typeof window === 'undefined') {
    console.log('‚ö†Ô∏è reinitializeSupabaseClient s√≥ pode ser chamado no cliente');
    return;
  }
  
  console.log('üîÑ Reiniciando cliente de Supabase...');
  
  try {
    // Limpar a sesi√≥n actual
    localStorage.removeItem('supabase.auth.token');
    
    // Reiniciar o cliente
    _supabase = null;
    
    // Intentar inicializar de novo
    const client = supabase;
    console.log('‚úÖ Cliente de Supabase reiniciado correctamente');
    
    // Comprobar conexi√≥n
    client.from('profiles').select('count', { count: 'exact', head: true })
      .then(() => console.log('‚úÖ Conexi√≥n con Supabase verificada despois de reiniciar'))
      .catch((err: any) => console.error('‚ùå Error ao verificar conexi√≥n despois de reiniciar:', err));
      
  } catch (error) {
    console.error('‚ùå Error ao reiniciar o cliente de Supabase:', error);
  }
};

// Funci√≥n mejorada para obtener variables de entorno
// Prueba todas las fuentes posibles y utiliza valores hardcodeados como √∫ltimo recurso
const getEnvVariable = (name: string): string => {
  let value: string | undefined;
  
  if (typeof window !== 'undefined') {
    try {
      // 1. Intentar obtener desde localStorage (preferido)
      const localValue = localStorage.getItem(name);
      if (isValidValue(localValue)) {
        console.log(`‚úÖ Variable ${name} obtenida desde localStorage`);
        return localValue!;
      }
      
      // 2. Intentar obtener desde window.ENV
      if (window.ENV && isValidValue(window.ENV[name])) {
        console.log(`‚úÖ Variable ${name} obtenida desde window.ENV`);
        value = window.ENV[name];
        // Guardar en localStorage para futuras referencias
        localStorage.setItem(name, value);
        return value;
      }
      
      // 3. Intentar valores de process.env (en desarrollo)
      if (process.env && isValidValue(process.env[name])) {
        console.log(`‚úÖ Variable ${name} obtenida desde process.env`);
        value = process.env[name]!;
        return value;
      }
      
      // 4. √öltimo recurso: usar valores hardcodeados
      if (HARDCODED_FALLBACKS[name as keyof typeof HARDCODED_FALLBACKS]) {
        console.warn(`‚ö†Ô∏è Usando valor HARDCODED para ${name} - Isto s√≥ deber√≠a ocorrer se as variables de Netlify non est√°n configuradas`);
        value = HARDCODED_FALLBACKS[name as keyof typeof HARDCODED_FALLBACKS];
        // Guardar en localStorage para futuras referencias
        localStorage.setItem(name, value);
        return value;
      }
      
    } catch (error) {
      console.error(`‚ùå Erro ao acceder √°s variables de entorno para ${name}:`, error);
    }
  } else {
    // En SSR o durante la exportaci√≥n est√°tica, intentar usar process.env
    if (process.env && isValidValue(process.env[name])) {
      return process.env[name]!;
    }
  }
  
  // Si llegamos aqu√≠, no pudimos obtener un valor v√°lido
  console.error(`‚ùå Non se puido obter un valor v√°lido para ${name}`);
  
  // Devolver un valor predeterminado como √∫ltimo recurso
  // Esto evitar√° errores de inicializaci√≥n pero la conexi√≥n no funcionar√° correctamente
  return HARDCODED_FALLBACKS[name as keyof typeof HARDCODED_FALLBACKS] || 'https://placeholder-for-static-export.supabase.co';
};

// Obter as variables de configuraci√≥n de Supabase con manejo mejorado
const supabaseUrl = getEnvVariable('NEXT_PUBLIC_SUPABASE_URL');
const supabaseAnonKey = getEnvVariable('NEXT_PUBLIC_SUPABASE_ANON_KEY');

// Crea un cliente de Supabase lazy-loaded (s√≥ se inicializa cando √© necesario)
let _supabase: any = null;

// Funci√≥n mejorada para validar variables
const validateEnvVariables = (): boolean => {
  const validUrl = isValidValue(supabaseUrl) && supabaseUrl.startsWith('https://');
  const validKey = isValidValue(supabaseAnonKey) && supabaseAnonKey.length > 20;
                  
  if (!validUrl) {
    console.error('‚ùå URL de Supabase inv√°lida:', supabaseUrl);
  }
  
  if (!validKey) {
    console.error('‚ùå Clave an√≥nima de Supabase inv√°lida (lonxitude insuficiente)');
  }
  
  return validUrl && validKey;
};

export const supabase = (() => {
  // Detectar si estamos en fase de exportaci√≥n est√°tica para Netlify
  if (typeof window === 'undefined') {
    if (process.env.NEXT_PHASE === 'phase-production-build') {
      // Durante la exportaci√≥n est√°tica, creamos un cliente m√≠nimo con m√©todos simulados
      console.log('üèóÔ∏è Exportaci√≥n est√°tica: Creando cliente simulado de Supabase');
      return {
        auth: {
          signUp: () => Promise.resolve({ data: {}, error: null }),
          signInWithPassword: () => Promise.resolve({ data: {}, error: null }),
          signOut: () => Promise.resolve({ error: null }),
          getSession: () => Promise.resolve({ data: { session: null }, error: null })
        },
        from: () => ({
          select: () => Promise.resolve({ data: [], error: null }),
          insert: () => Promise.resolve({ data: {}, error: null }),
          upsert: () => Promise.resolve({ data: {}, error: null })
        }),
        rpc: () => Promise.resolve({ data: {}, error: null })
      } as any;
    }
    
    // Durante o SSR normal, devolvemos un cliente b√°sico
    return createClient(supabaseUrl, supabaseAnonKey);
  }
  
  // No cliente, verificamos as variables de entorno
  if (!validateEnvVariables()) {
    console.error('‚ùå ERRO CR√çTICO: Variables de entorno de Supabase non v√°lidas');
    console.log('Intentando usar valores de respaldo hardcodeados...');
    
    // Intentar usar los valores hardcodeados como √∫ltimo recurso
    try {
      console.log('Inicializando cliente con valores de respaldo hardcodeados');
      
      const fallbackUrl = HARDCODED_FALLBACKS.NEXT_PUBLIC_SUPABASE_URL;
      const fallbackKey = HARDCODED_FALLBACKS.NEXT_PUBLIC_SUPABASE_ANON_KEY;
      
      return createClient(fallbackUrl, fallbackKey, {
        auth: {
          persistSession: true,
          autoRefreshToken: true,
          detectSessionInUrl: true
        }
      });
    } catch (e) {
      console.error('‚ùå Error al crear cliente incluso con valores fallback:', e);
      // Devolver un objeto ficticio con la misma API para evitar errores
      return {
        auth: { 
          signUp: () => Promise.reject('Supabase non configurado correctamente'), 
          signIn: () => Promise.reject('Supabase non configurado correctamente'),
          getSession: () => Promise.resolve({ data: { session: null }, error: null })
        },
        from: () => ({ 
          select: () => Promise.reject('Supabase non configurado correctamente'),
          insert: () => Promise.reject('Supabase non configurado correctamente')
        })
      } as any;
    }
  }
  
  // No cliente, inicializamos o cliente s√≥ unha vez e us√°molo para todas as chamadas
  if (!_supabase) {
    try {
      console.log('Inicializando cliente Supabase con:', { 
        url: supabaseUrl.substring(0, 20) + '...', 
        keyLength: supabaseAnonKey.length 
      });
      // Configuraci√≥n expl√≠cita para funcionar sin emails
      _supabase = createClient(supabaseUrl, supabaseAnonKey, {
        auth: {
          persistSession: true,
          autoRefreshToken: true,
          detectSessionInUrl: false, // Cambiamos a false para evitar interferencias
          flowType: 'implicit' // Autenticaci√≥n sin emails
        }
      });
      console.log('Cliente Supabase inicializado correctamente (con emails DESACTIVADOS)');
      
      // Verificar la conexi√≥n con una petici√≥n simple
      _supabase.from('profiles').select('count', { count: 'exact', head: true })
        .then(() => console.log('‚úÖ Conexi√≥n a Supabase verificada correctamente'))
        .catch((err: any) => console.error('‚ùå Error al verificar la conexi√≥n a Supabase:', err));
      
    } catch (error) {
      console.error('Erro ao inicializar cliente Supabase:', error);
      throw new Error('Non se puido inicializar o cliente de Supabase: ' + (error as Error).message);
    }
  }
  
  return _supabase;
})();

// Funci√≥n para obter o cliente de Supabase coa clave de servizo (s√≥ para uso en servidor)
export const getServiceSupabase = () => {
  // En el entorno de Netlify, los usuarios normales no deber√≠an poder crear otros usuarios
  // Vamos a intentar simplificar el registro usando signUp normal en lugar de admin.createUser
  if (typeof window !== 'undefined') {
    console.log('‚ö†Ô∏è Solicitando cliente de servicio desde el navegador. Esto no es ideal, pero intentaremos hacerlo funcionar...');
    
    // En Netlify, para simplificar, usaremos el m√©todo de registro normal en lugar de admin
    return supabase;
  }
  
  // Este c√≥digo solo deber√≠a ejecutarse en un entorno de servidor real
  const serviceRoleKey = getEnvVariable('NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY');
  
  // Validar la clave de servicio
  if (!isValidValue(serviceRoleKey) || serviceRoleKey.length < 20) {
    console.error('‚ùå Clave de servizo de Supabase inv√°lida ou non configurada');
    console.error('Por favor, aseg√∫rate de configurar NEXT_PUBLIC_SUPABASE_SERVICE_ROLE_KEY en Netlify');
    return supabase; // Usar el cliente normal como fallback
  }
  
  // Nota: Este cliente s√≥ debe usarse no servidor en tempo de execuci√≥n, non durante a exportaci√≥n
  return createClient(supabaseUrl, serviceRoleKey);
};
